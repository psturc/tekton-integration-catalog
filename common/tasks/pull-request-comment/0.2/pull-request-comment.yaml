---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: pull-request-commenter
spec:
  description: |
    The `pull-request-commenter` Task posts a comment on a GitHub pull request indicating the status of a Tekton pipeline execution.
    This task deletes any previous comments made by the pipeline and posts a new one, unless the pipeline was successful, in which case
    it skips commenting. The comment includes a summary of the pipeline run status, links to build logs, and instructions for
    re-running the tests or pulling down artifacts using ORAS.
  params:
    - name: test-name
      type: string
      description: The name of the pipeline run being executed.
    - name: oci-container
      type: string
      description: The ORAS container registry URI where the test artifacts are stored.
    - name: job-spec
      type: string
      description: Job spec for this PLR generated by [test-metadata](../../test-metadata/0.2/test-metadata.yaml) task.
    - name: pipeline-aggregate-status
      type: string
      description: The aggregate status of the pipeline run (Succeeded, Failed, Completed, None).
      default: None
    - name: junit-report-name
      type: string
      default: junit.xml
      description: The name of the JUnit file to be used for test results analysis
    - name: e2e-log-name
      type: string
      default: e2e-tests.log
      description: The name of the log file from E2E tests run to be used for test results analysis
    - name: cluster-provision-log-name
      type: string
      default: cluster-provision.log
      description: The name of the log file from cluster provisioning to be used for test results analysis
    - name: enable-test-results-analysis
      type: string
      default: "false"
      description: Add "true" if you want to enable experimental test analysis step
  volumes:
    - name: konflux-test-infra-volume
      secret:
        secretName: konflux-test-infra
  steps:
    - name: analyze-test-results
      ref:
        resolver: git
        params:
          - name: url
            value: https://github.com/psturc/konflux-qe-definitions.git
          - name: revision
            value: KFLUXDP-42
          - name: pathInRepo
            value: common/stepactions/analyze-test-results/0.1/analyze-test-results.yaml
      params:
        - name: workspace-path
          value: /workspace
        - name: analysis-output-file
          value: analysis.md
        - name: oci-ref
          value: $(params.oci-container)
        - name: junit-report-name
          value: $(params.junit-report-name)
        - name: e2e-log-name
          value: $(params.e2e-log-name)
        - name: cluster-provision-log-name
          value: $(params.cluster-provision-log-name)
      when:
        - input: "$(params.enable-test-results-analysis)"
          operator: in
          values: [ "true" ]
    - name: pull-request-comment
      env:
        - name: JOB_SPEC
          value: "$(params.job-spec)"
        - name: BUILD_CONSOLE_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['pac.test.appstudio.openshift.io/log-url']
      workingDir: /workspace
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      volumeMounts:
        - name: konflux-test-infra-volume
          mountPath: /usr/local/konflux-test-infra
      script: |
        #!/bin/sh

        export TEST_NAME="$(params.test-name)"
        export PR_AUTHOR="$(echo "$JOB_SPEC" | jq -r '.git.pull_request_author')"
        export OCI_STORAGE_CONTAINER="$(params.oci-container)"
        export GIT_ORG="$(echo "$JOB_SPEC" | jq -r '.git.org')"
        export GIT_REPO="$(echo "$JOB_SPEC" | jq -r '.git.repo')"
        export PR_NUMBER="$(echo "$JOB_SPEC" | jq -r '.git.pull_request_number')"
        export PIPELINE_RUN_AGGREGATE_STATUS="$(params.pipeline-aggregate-status)"

        GITHUB_TOKEN="$(cat /usr/local/konflux-test-infra/github-bot-commenter-token)"
        if [ -z "$GITHUB_TOKEN" ]; then
            echo "Error: GITHUB_TOKEN env is not set."
            exit 1
        fi

        # Get the authenticated user's login
        USER_LOGIN=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/user" | jq -r '.login')

        if [ -z "$USER_LOGIN" ]; then
            echo "[ERROR] Unable to retrieve user login."
            exit 1
        fi

        # Get all comments on the pull request
        COMMENTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GIT_ORG/$GIT_REPO/issues/$PR_NUMBER/comments")

        # Find and delete any existing comments by the authenticated user
        COMMENT_IDS=$(echo "$COMMENTS" | jq -r --arg USER_LOGIN "$USER_LOGIN" '.[] | select(.user.login == $USER_LOGIN) | .id')
        for COMMENT_ID in $COMMENT_IDS; do
            DELETE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -X DELETE \
                "https://api.github.com/repos/$GIT_ORG/$GIT_REPO/issues/comments/$COMMENT_ID")

            if [ -z "$DELETE_RESPONSE" ]; then
                echo "[INFO] Existing comment with ID $COMMENT_ID by $USER_LOGIN deleted successfully."
            else
                echo "[ERROR] Failed to delete comment with ID $COMMENT_ID. Response: $DELETE_RESPONSE"
            fi
        done

        # If the pipeline succeeded, do not post a new comment and exit
        if [[ "$PIPELINE_RUN_AGGREGATE_STATUS" == "Succeeded" ]]; then
            echo "[INFO]: Pipeline finished successfully. No new comment will be posted."
            exit 0
        fi

        export INTEGRATION_TEST_CONSOLE_URL="${BUILD_CONSOLE_URL%/*}/$(params.test-name)"

        # Store the content of the test results analysis (from a previous step) in a variable
        TEST_RESULTS_ANALYSIS=$(cat analysis.md)

        PR_COMMENT=$(cat <<EOF
        @${PR_AUTHOR}: The following test has ${PIPELINE_RUN_AGGREGATE_STATUS}, say **/retest** to rerun failed tests.

        | PipelineRun Name | Status | Rerun command | Build Log | Test Log |
        |------------------|--------|---------------|-----------|----------|
        | \`$TEST_NAME\`    | **$PIPELINE_RUN_AGGREGATE_STATUS** | \`/retest\` | [View Pipeline Log]($BUILD_CONSOLE_URL) | [View Test Logs]($INTEGRATION_TEST_CONSOLE_URL) |

        ### Inspecting Test Artifacts
        To inspect your test artifacts, follow these steps:
        1. Install **ORAS** (see the [ORAS installation guide](https://oras.land/docs/installation)).
        2. Download artifacts with the following commands:

        \`\`\`sh
        mkdir -p oras-artifacts
        cd oras-artifacts
        oras pull $OCI_STORAGE_CONTAINER
        \`\`\`
        ### Test results analysis
        $TEST_RESULTS_ANALYSIS
        EOF
        )
        # Combine body components into the final JSON body
        REQUEST_DATA=$(jq -n --arg body "${PR_COMMENT}" '{body: $body}')

        # Post the comment to GitHub
        RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "$REQUEST_DATA" \
            "https://api.github.com/repos/$GIT_ORG/$GIT_REPO/issues/$PR_NUMBER/comments")

        # Check if the comment was posted successfully
        if echo "$RESPONSE" | grep -q '"id"'; then
            echo "[INFO] Comment posted successfully."
        else
            echo "[ERROR] Failed to post comment. Response: $RESPONSE"
        fi

---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sealights-get-refs
  labels:
    konflux-ci/sealights: "true"
spec:
  description: |
    The sealights-get-refs Task is responsible for retrieving metadata associated with Sealights
    instrumentation in a CI pipeline. This includes information about the Sealights Build Session ID,
    the source artifact type, the instrumented container image, and the build name.
    The Task fetches this metadata by parsing attestation information of the container image specified
    in the SNAPSHOT parameter using cosign.
  results:
    - name: sealights-source-artifact
      description: The source code OCI artifact that was instrumented with sealights.
    - name: sealights-bsid
      description: The Build Session ID (BSID) generated during the build for sealights.
    - name: sealights-container-image
      description: The container image used in the Sealights instrumentation process. 
    - name: sealights-build-name
      description: The build name generated by sealights instrumentation.
    - name: container-image
      description: The container image built from the specified Git revision without Sealights instrumentation.
    - name: component-source-artifact
      description: The OCI artifact containing the source code of the pristine image
  params:
    - name: SNAPSHOT
      description: The JSON string of the Snapshot under test.
  steps:
    - name: sealights-get-refs
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      env:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: KONFLUX_COMPONENT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['appstudio.openshift.io/component']
      script: |
        #!/bin/bash
        set -euo pipefail
        COMPONENT_CONTAINER_IMAGE=$(jq -r --arg component_name "$KONFLUX_COMPONENT_NAME" '.components[] | select(.name == $component_name) | .containerImage' <<< "$SNAPSHOT")

        # Download and save cosign metadata to a temporary file
        cosign download attestation "${COMPONENT_CONTAINER_IMAGE}" > cosign_metadata.json

        COMPONENT_SOURCE_ARTIFACT="$(jq -r \
            '.payload | @base64d | fromjson | .predicate.buildConfig.tasks[] | 
            select(.name == "clone-repository") | .results[] | select(.name == "SOURCE_ARTIFACT") | .value' \
            cosign_metadata.json)"

        SL_BSID="$(jq -r \
            '.payload | @base64d | fromjson | .predicate.buildConfig.tasks[] |
            select(.invocation.environment.labels."konflux-ci/sealights" == "true")
            | .results[] | select(.name == "sealights-bsid") | .value' \
            cosign_metadata.json)"

        SL_SOURCE_ARTIFACT="$(jq -r \
            '.payload | @base64d | fromjson | .predicate.buildConfig.tasks[] |
            select(.invocation.environment.labels."konflux-ci/sealights" == "true")
            | .results[] | select(.name == "SOURCE_ARTIFACT") | .value' \
            cosign_metadata.json)"

        SL_CONTAINER_IMAGE="$(jq -r --arg sl_source_artifact "$SL_SOURCE_ARTIFACT" '
            .payload | @base64d | fromjson | .predicate.buildConfig.tasks[] |
            select(.invocation.parameters.SOURCE_ARTIFACT == $sl_source_artifact) |
            select(.ref.params[].value == "buildah-oci-ta") | .results[] | select(.name == "IMAGE_REF") |
            .value' \
            cosign_metadata.json)"

        SL_BUILD_NAME="$(jq -r \
            '.payload | @base64d | fromjson | .predicate.buildConfig.tasks[] |
            select(.invocation.environment.labels."konflux-ci/sealights" == "true")
            | .results[] | select(.name == "sealights-build-name") | .value' \
            cosign_metadata.json)"

        # Log the derived environment variables
        echo "Component metadata:"
        echo "  Component's container image: $COMPONENT_CONTAINER_IMAGE"
        echo "  Copmonent's source artifact: $COMPONENT_SOURCE_ARTIFACT"

        echo "Sealights metadata:"
        echo "  Sealights Build Session Id: $SL_BSID"

        if [[ -n "$SL_SOURCE_ARTIFACT" || -n "$SL_CONTAINER_IMAGE" ]]; then
          [[ -n "$SL_SOURCE_ARTIFACT" ]] && echo "  Sealights Trusted Artifact: $SL_SOURCE_ARTIFACT"
          [[ -n "$SL_CONTAINER_IMAGE" ]] && echo "  Sealights Instrumented Container: $SL_CONTAINER_IMAGE"
        fi

        echo "  Sealights Build Name: $SL_BUILD_NAME"

        # Write each environment variable to its respective result file
        echo -n "$SL_SOURCE_ARTIFACT" > $(results.sealights-source-artifact.path)
        echo -n "$SL_BSID" > $(results.sealights-bsid.path)
        echo -n "$SL_CONTAINER_IMAGE" > $(results.sealights-container-image.path)
        echo -n "$SL_BUILD_NAME" > $(results.sealights-build-name.path)
        echo -n "$COMPONENT_CONTAINER_IMAGE" > $(results.container-image.path)
        echo -n "$COMPONENT_SOURCE_ARTIFACT" > $(results.component-source-artifact.path)
